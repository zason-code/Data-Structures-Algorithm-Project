#BlueJ class context
comment0.target=Project
comment0.text=\r\n\ @author\ Andrew\ "Gozz"\ Gozzard\ <andrew.gozzard@uwa.edu.au>\r\n\r\n\ DO\ NOT\ MODIFY\ this\ file\ in\ the\ course\ of\ completing\ your\ project.\r\n\ \r\n\ The\ interface\ to\ implement\ for\ the\ 2020\ CITS2200\ Data\ Structures\ and\ Algorithms\ Project.\r\n\ Your\ implementation\ MUST\ provide\ a\ zero-argument\ constructor,\ which\ will\ be\ the\ only\ one\ used\ when\ assessing\ your\ submission.\r\n\ \r\n\ All\ questions\ work\ with\ a\ greyscale\ image\ specified\ as\ a\ 2D\ int\ array.\r\n\ The\ array\ is\ indexed\ first\ by\ row,\ then\ by\ column.\r\n\ Every\ row\ in\ the\ array\ will\ be\ the\ same\ length.\r\n\ Every\ element\ in\ the\ array\ will\ be\ non-negative\ and\ no\ greater\ than\ 255.\r\n\ A\ value\ of\ 0\ represents\ a\ black\ pixel,\ and\ a\ value\ of\ 255\ represents\ white,\ with\ shades\ of\ grey\ in\ between.\r\n\ \r\n\ Time\ complexity\ specifications\ use\ R\ for\ number\ of\ rows,\ C\ for\ number\ of\ columns,\ and\ P\ \=\ R*C\ for\ number\ of\ pixels.\r\n
comment1.params=image\ row\ col
comment1.target=int\ floodFillCount(int[][],\ int,\ int)
comment1.text=\r\n\ Compute\ the\ number\ of\ pixels\ that\ change\ when\ performing\ a\ black\ flood-fill\ from\ the\ pixel\ at\ (row,\ col)\ in\ the\ given\ image.\r\n\ A\ flood-fill\ operation\ changes\ the\ selected\ pixel\ and\ all\ contiguous\ pixels\ of\ the\ same\ colour\ to\ the\ specified\ colour.\r\n\ A\ pixel\ is\ considered\ part\ of\ a\ contiguous\ region\ of\ the\ same\ colour\ if\ it\ is\ exactly\ one\ pixel\ up/down/left/right\ of\ another\ pixel\ in\ the\ region.\r\n\ \r\n\ Marks\ (4\ total)\:\r\n\ -\ Correctness\:\ +2\ marks\r\n\ -\ Complexity\:\r\n\ \ \ -\ O(P)\:\ +1\ mark\r\n\ -\ Quality\:\ +1\ mark\r\n\ \r\n\ @param\ image\ The\ greyscale\ image\ as\ defined\ above\r\n\ @param\ row\ The\ row\ index\ of\ the\ pixel\ to\ flood-fill\ from\r\n\ @param\ col\ The\ column\ index\ of\ the\ pixel\ to\ flood-fill\ from\r\n\ @return\ The\ number\ of\ pixels\ that\ changed\ colour\ when\ performing\ this\ operation\r\n
comment2.params=image\ k
comment2.target=int\ brightestSquare(int[][],\ int)
comment2.text=\r\n\ Compute\ the\ total\ brightness\ of\ the\ brightest\ exactly\ k*k\ square\ that\ appears\ in\ the\ given\ image.\r\n\ The\ total\ brightness\ of\ a\ square\ is\ defined\ as\ the\ sum\ of\ its\ pixel\ values.\r\n\ You\ may\ assume\ that\ k\ is\ positive,\ no\ greater\ than\ R\ or\ C,\ and\ no\ greater\ than\ 2048.\r\n\ \r\n\ Marks\ (5\ total)\:\r\n\ -\ Correctness\:\ +2\ marks\r\n\ -\ Complexity\:\r\n\ \ \ -\ O(Pk)\:\ +1\ mark\r\n\ \ \ -\ O(P)\:\ +1\ mark\r\n\ -\ Quality\:\ +1\ mark\r\n\ \r\n\ @param\ image\ The\ greyscale\ image\ as\ defined\ above\r\n\ @param\ k\ the\ dimension\ of\ the\ squares\ to\ consider\r\n\ @return\ The\ total\ brightness\ of\ the\ brightest\ square\r\n
comment3.params=image\ ur\ uc\ vr\ vc
comment3.target=int\ darkestPath(int[][],\ int,\ int,\ int,\ int)
comment3.text=\r\n\ Compute\ the\ maximum\ brightness\ that\ MUST\ be\ encountered\ when\ drawing\ a\ path\ from\ the\ pixel\ at\ (ur,\ uc)\ to\ the\ pixel\ at\ (vr,\ vc).\r\n\ The\ path\ must\ start\ at\ (ur,\ uc)\ and\ end\ at\ (vr,\ vc),\ and\ may\ only\ move\ one\ pixel\ up/down/left/right\ at\ a\ time\ in\ between.\r\n\ The\ brightness\ of\ a\ path\ is\ considered\ to\ be\ the\ value\ of\ the\ brightest\ pixel\ that\ the\ path\ ever\ touches.\r\n\ This\ includes\ the\ start\ and\ end\ pixels\ of\ the\ path.\r\n\ \r\n\ Marks\ (5\ total)\:\r\n\ -\ Correctness\:\ +2\ marks\r\n\ -\ Complexity\:\r\n\ \ \ -\ O(P\ log\ P)\:\ +1\ mark\r\n\ -\ Quality\:\ +2\ mark\r\n\ \r\n\ @param\ image\ The\ greyscale\ image\ as\ defined\ above\r\n\ @param\ ur\ The\ row\ index\ of\ the\ start\ pixel\ for\ the\ path\r\n\ @param\ uc\ The\ column\ index\ of\ the\ start\ pixel\ for\ the\ path\r\n\ @param\ vr\ The\ row\ index\ of\ the\ end\ pixel\ for\ the\ path\r\n\ @param\ vc\ The\ column\ index\ of\ the\ end\ pixel\ for\ the\ path\r\n\ @return\ The\ minimum\ brightness\ of\ any\ path\ from\ (ur,\ uc)\ to\ (vr,\ vc)\r\n
comment4.params=image\ queries
comment4.target=int[]\ brightestPixelsInRowSegments(int[][],\ int[][])
comment4.text=\r\n\ Compute\ the\ results\ of\ a\ list\ of\ queries\ on\ the\ given\ image.\r\n\ Each\ query\ will\ be\ a\ three-element\ int\ array\ {r,\ l,\ u}\ defining\ a\ row\ segment.\ You\ may\ assume\ l\ <\ u.\r\n\ A\ row\ segment\ is\ a\ set\ of\ pixels\ (r,\ c)\ such\ that\ r\ is\ as\ defined,\ l\ <\=\ c,\ and\ c\ <\ u.\r\n\ For\ each\ query,\ find\ the\ value\ of\ the\ brightest\ pixel\ in\ the\ specified\ row\ segment.\r\n\ Return\ the\ query\ results\ in\ the\ same\ order\ as\ the\ queries\ are\ given.\r\n\ \r\n\ Marks\ (6\ total)\:\r\n\ -\ Correctness\:\ +2\ marks\r\n\ -\ Complexity\:\ (where\ Q\ is\ the\ number\ of\ queries)\r\n\ \ \ -\ O(PC\ +\ Q)\:\ +1\ mark\r\n\ \ \ -\ O(P\ log\ C\ +\ Q\ log\ C)\:\ +1\ mark\r\n\ \ \ -\ Faster\ is\ possible\ but\ will\ not\ receive\ additional\ marks\r\n\ -\ Quality\:\ +2\ marks\r\n\ \r\n\ @param\ image\ The\ greyscale\ image\ as\ defined\ above\r\n\ @param\ queries\ The\ list\ of\ query\ row\ segments\r\n\ @return\ The\ list\ of\ brightest\ pixels\ for\ each\ query\ row\ segment\r\n
numComments=5
